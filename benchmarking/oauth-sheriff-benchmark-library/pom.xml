<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>de.cuioss.sheriff.oauth</groupId>
        <artifactId>benchmarking</artifactId>
        <version>1.0.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <artifactId>oauth-sheriff-benchmark-library</artifactId>
    <packaging>jar</packaging>
    <name>OAuth Sheriff Benchmark Library</name>
    <description>Benchmarking module for OAuth/JWT token validation</description>

    <properties>
        <maven.jar.plugin.automatic.module.name>de.cuioss.sheriff.oauth.benchmark.library</maven.jar.plugin.automatic.module.name>

        <!-- Default benchmark runner -->
        <benchmark.runner>de.cuioss.sheriff.oauth.library.benchmark.LibraryBenchmarkRunner</benchmark.runner>

        <!-- JMH Configuration Properties - Optimized for fast execution (<10 minutes) -->
        <jmh.include>de\.cuioss\.sheriff\.oauth\.library\.benchmark\.standard\..*</jmh.include>
        <jmh.result.format>JSON</jmh.result.format>
        <jmh.result.filePrefix>target/benchmark-results/micro-result</jmh.result.filePrefix>
        <jmh.iterations>5</jmh.iterations>
        <jmh.warmupIterations>3</jmh.warmupIterations>
        <jmh.forks>1</jmh.forks>
        <!-- Reduced from 200 to 100 threads to avoid contention and improve P99 latency -->
        <jmh.threads>100</jmh.threads>
        <jmh.time>4s</jmh.time>
        <jmh.warmupTime>1s</jmh.warmupTime>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>de.cuioss.sheriff.oauth</groupId>
                <artifactId>oauth-sheriff-bom</artifactId>
                <version>${project.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>de.cuioss.sheriff.oauth</groupId>
                <artifactId>oauth-sheriff-library</artifactId>
                <version>${project.version}</version>
                <classifier>generators</classifier>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- Internal module dependencies -->
        <dependency>
            <groupId>de.cuioss.sheriff.oauth</groupId>
            <artifactId>oauth-sheriff-library</artifactId>
        </dependency>
        <dependency>
            <groupId>de.cuioss.sheriff.oauth</groupId>
            <artifactId>oauth-sheriff-benchmarking-common</artifactId>
            <version>${project.version}</version>
        </dependency>

        <!-- Test dependencies from validation module -->
        <dependency>
            <groupId>de.cuioss.sheriff.oauth</groupId>
            <artifactId>oauth-sheriff-library</artifactId>
            <version>${project.version}</version>
            <classifier>generators</classifier>
            <scope>compile</scope>
        </dependency>

<!-- Keycloak test integration -->
        <dependency>
            <groupId>de.cuioss.test</groupId>
            <artifactId>cui-test-keycloak-integration</artifactId>
            <scope>compile</scope>
            <exclusions>
                <exclusion>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Rest Assured for API testing -->
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- Test utilities -->
        <dependency>
            <groupId>de.cuioss.test</groupId>
            <artifactId>cui-test-generator</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- JMH dependencies -->
        <dependency>
            <groupId>org.openjdk.jmh</groupId>
            <artifactId>jmh-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.openjdk.jmh</groupId>
            <artifactId>jmh-generator-annprocess</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Other dependencies -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <!-- JJWT dependencies -->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-api</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-impl</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-jackson</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- Jakarta JSON API -->
        <dependency>
            <groupId>jakarta.json</groupId>
            <artifactId>jakarta.json-api</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- Implementation of jakarta.json-api -->
        <dependency>
            <groupId>org.eclipse.parsson</groupId>
            <artifactId>parsson</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- HdrHistogram for accurate latency recording -->
        <dependency>
            <groupId>org.hdrhistogram</groupId>
            <artifactId>HdrHistogram</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- Gson for JSON serialization -->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- Awaitility for better async testing -->
        <dependency>
            <groupId>org.awaitility</groupId>
            <artifactId>awaitility</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Skip unit tests by default -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skipTests>${skipTests}</skipTests>
                </configuration>
            </plugin>

            <!-- Enable annotation processing for JMH -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.openjdk.jmh</groupId>
                            <artifactId>jmh-generator-annprocess</artifactId>
                            <version>${version.jmh}</version>
                        </path>
                    </annotationProcessorPaths>
                    <release>21</release>
                </configuration>
            </plugin>

            <!-- Execute benchmark tests when skip.benchmark is false -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>run-benchmarks</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skip.benchmark}</skip>
                            <executable>java</executable>
                            <arguments>
                                <argument>-classpath</argument>
                                <argument>${project.build.outputDirectory}${path.separator}${project.build.directory}/dependency/*</argument>
                                <argument>-Djmh.include=${jmh.include}</argument>
                                <argument>-Djmh.result.format=${jmh.result.format}</argument>
                                <argument>-Djmh.result.filePrefix=${jmh.result.filePrefix}</argument>
                                <argument>-Djmh.iterations=${jmh.iterations}</argument>
                                <argument>-Djmh.warmupIterations=${jmh.warmupIterations}</argument>
                                <argument>-Djmh.forks=${jmh.forks}</argument>
                                <argument>-Djmh.threads=${jmh.threads}</argument>
                                <argument>-Djmh.time=${jmh.time}</argument>
                                <argument>-Djmh.warmupTime=${jmh.warmupTime}</argument>
                                <argument>-Djava.util.logging.config.file=benchmark-logging.properties</argument>
                                <argument>-XX:+UnlockDiagnosticVMOptions</argument>
                                <argument>-XX:+DebugNonSafepoints</argument>
                                <argument>${benchmark.runner}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Build classpath for benchmark execution -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <!-- Configuration inherited from parent pluginManagement -->
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>benchmark</id>
            <properties>
                <skip.benchmark>false</skip.benchmark>
            </properties>
        </profile>
        <profile>
            <id>benchmark-jfr</id>
            <properties>
                <skip.benchmark>false</skip.benchmark>
                <benchmark.runner>de.cuioss.sheriff.oauth.library.benchmark.JfrBenchmarkRunner</benchmark.runner>
            </properties>
        </profile>

        <!-- Analyze JFR recordings -->
        <profile>
            <id>analyze-jfr</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>analyze-jfr-recording</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>java</goal>
                                </goals>
                                <configuration>
                                    <skip>false</skip>
                                    <mainClass>de.cuioss.benchmarking.common.jfr.JfrVarianceAnalyzer</mainClass>
                                    <arguments>
                                        <argument>${jfr.file}</argument>
                                    </arguments>
                                    <classpathScope>compile</classpathScope>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- Quick benchmark profile for faster testing -->
        <profile>
            <id>quick</id>
            <properties>
                <!-- Override JMH parameters for quick benchmarks -->
                <jmh.iterations>2</jmh.iterations>
                <jmh.warmupIterations>1</jmh.warmupIterations>
                <jmh.forks>1</jmh.forks>
                <jmh.time>5s</jmh.time>
                <jmh.warmupTime>2s</jmh.warmupTime>
            </properties>
        </profile>
    </profiles>
</project>
