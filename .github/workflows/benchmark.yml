name: JMH Benchmark

on:
  pull_request:
    branches: [ "main" ]
  push:
    tags: [ "*" ]
  workflow_dispatch:

# Declare default permissions as read only
permissions: read-all

# Prevent concurrent benchmark runs to avoid interference
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel in-progress runs as benchmarks are expensive

jobs:
  benchmark:
    name: Run JMH Benchmarks
    runs-on: ubuntu-latest
    # Only run on merged PRs, not just closed ones
    if: github.event_name != 'pull_request' || github.event.pull_request.merged == true
    # Add timeout to prevent long-running jobs
    timeout-minutes: 30
    permissions:
      # Needed to upload artifacts
      contents: write

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Set up JDK 21
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build cui-jwt-validation
        run: |
          # Build validation module first to ensure test artifact is available for benchmarking
          ./mvnw --no-transfer-progress clean install -pl cui-jwt-validation -DskipTests

      - name: Run JMH Benchmarks
        run: |
          # Create directory for benchmark results
          mkdir -p benchmark-results

          # Run benchmarks with JSON output format, skipping tests to avoid duplicate runs
          # Configure JMH parameters for CI environment: fewer iterations for faster execution
          ./mvnw --no-transfer-progress clean verify -pl cui-jwt-benchmarking -Dskip.benchmark=false -DskipTests \
            -Djmh.result.format=JSON \
            -Djmh.result.filePrefix=benchmark-results/jmh-result \
            -Djmh.iterations=3 \
            -Djmh.warmupIterations=2 \
            -Djmh.forks=1 \
            -Djmh.threads=2

          # Move benchmark results to expected location for upload
          if [ -d "cui-jwt-benchmarking/benchmark-results" ]; then
            echo "Moving benchmark results to upload location..."
            mv cui-jwt-benchmarking/benchmark-results .
          else
            echo "Creating empty benchmark-results directory..."
            mkdir -p benchmark-results
          fi

          # Add timestamp to results
          echo "{ \"timestamp\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\", \"commit\": \"${{ github.sha }}\" }" > benchmark-results/metadata.json

          # Verify that benchmark results were generated
          echo "Checking for benchmark results..."
          ls -la benchmark-results/
          find . -name "jmh-result*.json" -type f || echo "No JMH result files found anywhere"

      - name: Upload benchmark results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: benchmark-results
          path: benchmark-results/
          retention-days: 90  # Keep results for 90 days

      - name: Prepare GitHub Pages visualization
        run: |
          # Create directory for GitHub Pages
          mkdir -p gh-pages

          # Copy benchmark results to gh-pages directory
          cp -r benchmark-results/* gh-pages/

          # Find and rename the JMH result file for visualization
          # First check if jmh-result.json exists in project root
          if [ -f "jmh-result.json" ]; then
            echo "Using jmh-result.json from project root"
            cp jmh-result.json gh-pages/jmh-result.json
          else
            # Find the result file in benchmark-results directory
            echo "Looking for JMH result files in benchmark-results directory"
            find benchmark-results -name "jmh-result*.json" -type f -exec cp {} gh-pages/jmh-result.json \;
          fi

          # Verify and copy the visualizer template
          if [ ! -f "gh-pages/jmh-result.json" ]; then
            echo "ERROR: No benchmark result file found!"
            exit 1
          fi

          # Copy the JMH Visualizer template
          cp cui-jwt-benchmarking/doc/index-visualizer.html gh-pages/index.html

          # Create benchmark badges BEFORE deployment
          # Create directory for badges
          mkdir -p gh-pages/badges

          # Get current date for badge timestamp
          TIMESTAMP=$(date -u +"%Y-%m-%d")

          # Function to create a badge for a benchmark
          create_badge() {
            local benchmark_name=$1
            local display_name=$2
            local badge_name=$3
            local color=$4

            # Extract average time for benchmark (if available)
            # First check if the file exists in gh-pages directory (should have been copied there)
            if [ -f "gh-pages/jmh-result.json" ]; then
              local score=$(grep -o "\"$benchmark_name\".*\"score\":[0-9.]*" gh-pages/jmh-result.json | grep -o '"score":[0-9.]*' | cut -d':' -f2 | head -1 || echo "N/A")
            else
              echo "Warning: jmh-result.json not found in gh-pages directory"
              local score="N/A"
            fi

            if [ "$score" != "N/A" ]; then
              # Round to 2 decimal places
              local formatted_score=$(printf "%.2f" $score)

              # Create badge JSON with timestamp
              echo "{\"schemaVersion\":1,\"label\":\"$display_name\",\"message\":\"${formatted_score} ms ($TIMESTAMP)\",\"color\":\"$color\"}" > "gh-pages/badges/$badge_name.json"

              # Create badge markdown for README
              echo "[![$display_name](https://img.shields.io/endpoint?url=https://cuioss.github.io/cui-jwt/benchmarks/badges/$badge_name.json)](https://cuioss.github.io/cui-jwt/benchmarks/)" >> gh-pages/badge-markdown.txt

              echo "Created badge for $display_name: $formatted_score ms"
            else
              echo "Warning: Could not find benchmark results for $benchmark_name"
            fi
          }

          # Create header for badge markdown
          echo "## Benchmark Results ($TIMESTAMP)" > gh-pages/badge-markdown.txt

          # Create badges for key benchmarks
          create_badge "de.cuioss.jwt.validation.benchmark.TokenValidatorBenchmark.validateAccessToken" "Access Token Validation" "validator-badge" "blue"
          create_badge "de.cuioss.jwt.validation.benchmark.MultiIssuerValidatorBenchmark.validateToken" "Multi-Issuer Validation" "multi-issuer-badge" "green"
          create_badge "de.cuioss.jwt.validation.benchmark.JwksClientBenchmark.getKey" "JWKS Key Retrieval" "jwks-badge" "orange"

          # Create performance indicator badge
          create_performance_badge() {
            echo "Creating performance indicator badge..."
            
            if [ -f "gh-pages/jmh-result.json" ]; then
              # Extract throughput (ops/sec) from PerformanceIndicatorBenchmark.measureThroughput
              local throughput=$(jq -r '.[] | select(.benchmark == "de.cuioss.jwt.validation.benchmark.PerformanceIndicatorBenchmark.measureThroughput") | .primaryMetric.score' gh-pages/jmh-result.json 2>/dev/null || echo "0")
              
              # Extract average time (microseconds) from PerformanceIndicatorBenchmark.measureAverageTime  
              local avg_time=$(jq -r '.[] | select(.benchmark == "de.cuioss.jwt.validation.benchmark.PerformanceIndicatorBenchmark.measureAverageTime") | .primaryMetric.score' gh-pages/jmh-result.json 2>/dev/null || echo "0")
              
              echo "Debug: Extracted throughput=$throughput, avg_time=$avg_time"
              
              if [ "$throughput" != "0" ] && [ "$throughput" != "null" ] && [ "$avg_time" != "0" ] && [ "$avg_time" != "null" ]; then
                # Convert scientific notation to regular numbers
                throughput=$(echo "$throughput" | awk '{printf "%.0f", $1}')
                avg_time_microseconds=$(echo "$avg_time * 1000000" | bc -l | awk '{printf "%.1f", $1}')
                
                # Calculate weighted performance score: (throughput * 0.6) + ((1000000 / avg_time_microseconds) * 0.4)
                local latency_ops_per_sec=$(echo "scale=2; 1000000 / $avg_time_microseconds" | bc -l)
                local performance_score=$(echo "scale=2; ($throughput * 0.6) + ($latency_ops_per_sec * 0.4)" | bc -l)
                local formatted_score=$(printf "%.0f" $performance_score)
                local throughput_k=$(echo "scale=1; $throughput / 1000" | bc -l)
                
                # Create badge with performance score
                echo "{\"schemaVersion\":1,\"label\":\"Performance Score\",\"message\":\"${formatted_score} (${throughput_k}k ops/s, ${avg_time_microseconds}μs)\",\"color\":\"brightgreen\"}" > "gh-pages/badges/performance-badge.json"
                
                echo "Created performance badge: Score=$formatted_score (Throughput=${throughput_k}k ops/s, AvgTime=${avg_time_microseconds}μs)"
              else
                echo "Warning: Could not extract valid performance metrics (throughput=$throughput, avg_time=$avg_time)"
                echo "{\"schemaVersion\":1,\"label\":\"Performance Score\",\"message\":\"Pending\",\"color\":\"yellow\"}" > "gh-pages/badges/performance-badge.json"
              fi
            else
              echo "Warning: jmh-result.json not found"
              echo "{\"schemaVersion\":1,\"label\":\"Performance Score\",\"message\":\"No Data\",\"color\":\"red\"}" > "gh-pages/badges/performance-badge.json"
            fi
          }

          # Create the performance indicator badge
          create_performance_badge

          # Create a combined badge for all benchmarks
          echo "{\"schemaVersion\":1,\"label\":\"JWT Benchmarks\",\"message\":\"Updated $TIMESTAMP\",\"color\":\"brightgreen\"}" > gh-pages/badges/all-benchmarks.json

          # Copy the validator badge to the root for backward compatibility
          cp -f gh-pages/badges/validator-badge.json gh-pages/validator-badge.json || true

      - name: Deploy to cuioss.github.io
        uses: JamesIves/github-pages-deploy-action@6c2d9db40f9296374acc17b90404b6e8864128c8 # v4.7.3
        with:
          folder: gh-pages
          repository-name: cuioss/cuioss.github.io
          target-folder: cui-jwt/benchmarks
          branch: main
          token: ${{ secrets.PAGES_DEPLOY_TOKEN }}
