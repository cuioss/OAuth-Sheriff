name: JMH Benchmark

on:
  pull_request:
    branches: [ "main" ]
    types: [ closed ]
  push:
    tags: [ "*" ]
  workflow_dispatch:

# Declare default permissions as read only
permissions: read-all

# Prevent concurrent benchmark runs to avoid interference
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel in-progress runs as benchmarks are expensive

jobs:
  benchmark:
    name: Run JMH Benchmarks
    runs-on: ubuntu-latest
    # Only run on merged PRs, not just closed ones
    if: github.event_name != 'pull_request' || github.event.pull_request.merged == true
    # Add timeout to prevent long-running jobs
    timeout-minutes: 30
    permissions:
      # Needed to upload artifacts
      contents: write

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Set up JDK 21
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build cui-jwt-validation
        run: |
          # Build validation module first to ensure test artifact is available for benchmarking
          ./mvnw --no-transfer-progress clean install -pl cui-jwt-validation -DskipTests

      - name: Run JMH Benchmarks
        run: |
          # Create directory for benchmark results
          mkdir -p benchmark-results

          # Run benchmarks with JSON output format, skipping tests to avoid duplicate runs
          # Configure JMH parameters for CI environment: fewer iterations for faster execution
          ./mvnw --no-transfer-progress clean verify -pl cui-jwt-benchmarking -Dskip.benchmark=false -DskipTests \
            -Djmh.result.format=JSON \
            -Djmh.result.filePrefix=benchmark-results/jmh-result \
            -Djmh.iterations=3 \
            -Djmh.warmupIterations=2 \
            -Djmh.forks=1 \
            -Djmh.threads=2

          # Move benchmark results to expected location for upload
          if [ -d "cui-jwt-benchmarking/benchmark-results" ]; then
            echo "Moving benchmark results to upload location..."
            mv cui-jwt-benchmarking/benchmark-results .
          else
            echo "Creating empty benchmark-results directory..."
            mkdir -p benchmark-results
          fi

          # Add timestamp to results
          echo "{ \"timestamp\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\", \"commit\": \"${{ github.sha }}\" }" > benchmark-results/metadata.json

          # Verify that benchmark results were generated
          echo "Checking for benchmark results..."
          ls -la benchmark-results/
          find . -name "jmh-result*.json" -type f || echo "No JMH result files found anywhere"

      - name: Upload benchmark results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: benchmark-results
          path: benchmark-results/
          retention-days: 90  # Keep results for 90 days

      - name: Prepare GitHub Pages visualization
        run: |
          # Prepare GitHub Pages structure using script
          bash cui-jwt-benchmarking/doc/templates/scripts/prepare-github-pages.sh benchmark-results cui-jwt-benchmarking/doc/templates gh-pages

          # Get current date for badge timestamp
          TIMESTAMP=$(date -u +"%Y-%m-%d")
          TIMESTAMP_WITH_TIME=$(date -u +"%Y-%m-%d %H:%M")

          # Create header for badge markdown
          echo "## Benchmark Results ($TIMESTAMP)" > gh-pages/badge-markdown.txt

          # Create performance badge using script
          if [ -f "gh-pages/jmh-result.json" ]; then
            bash cui-jwt-benchmarking/doc/templates/scripts/create-performance-badge.sh gh-pages/jmh-result.json gh-pages/badges
          else
            echo "Warning: jmh-result.json not found"
            echo "{\"schemaVersion\":1,\"label\":\"Performance Score\",\"message\":\"No Data\",\"color\":\"red\"}" > "gh-pages/badges/performance-badge.json"
          fi

          # Create simple badges using script
          bash cui-jwt-benchmarking/doc/templates/scripts/create-simple-badge.sh gh-pages/jmh-result.json gh-pages/badges "$TIMESTAMP" "$TIMESTAMP_WITH_TIME"

          # Performance Tracking System using scripts
          echo "Setting up performance tracking..."
          COMMIT_HASH="${{ github.sha }}"
          
          if [ -f "gh-pages/jmh-result.json" ]; then
            # Create performance tracking data using script
            TRACKING_OUTPUT=$(bash cui-jwt-benchmarking/doc/templates/scripts/create-performance-tracking.sh gh-pages/jmh-result.json cui-jwt-benchmarking/doc/templates gh-pages "$COMMIT_HASH" 2>&1)
            echo "$TRACKING_OUTPUT"
            
            # Extract metrics from tracking script output
            PERF_SCORE=$(echo "$TRACKING_OUTPUT" | grep "PERF_SCORE=" | cut -d'=' -f2)
            PERF_THROUGHPUT=$(echo "$TRACKING_OUTPUT" | grep "PERF_THROUGHPUT=" | cut -d'=' -f2)
            PERF_LATENCY=$(echo "$TRACKING_OUTPUT" | grep "PERF_LATENCY=" | cut -d'=' -f2)
            PERF_RESILIENCE=$(echo "$TRACKING_OUTPUT" | grep "PERF_RESILIENCE=" | cut -d'=' -f2)
            
            if [ -n "$PERF_SCORE" ] && [ "$PERF_SCORE" != "0" ]; then
              # Update consolidated tracking and create trend badge using script
              bash cui-jwt-benchmarking/doc/templates/scripts/update-performance-trends.sh cui-jwt-benchmarking/doc/templates gh-pages "$COMMIT_HASH" "$PERF_SCORE" "$PERF_THROUGHPUT" "$PERF_LATENCY" "$PERF_RESILIENCE"
            else
              echo "Warning: Could not extract valid performance metrics for trend tracking"
              echo "{\"schemaVersion\":1,\"label\":\"Performance Trend\",\"message\":\"→ No Data\",\"color\":\"lightgrey\"}" > "gh-pages/badges/trend-badge.json"
            fi
          else
            echo "Warning: jmh-result.json not found for performance tracking"
            echo "{\"schemaVersion\":1,\"label\":\"Performance Trend\",\"message\":\"→ No Data\",\"color\":\"lightgrey\"}" > "gh-pages/badges/trend-badge.json"
          fi

      - name: Deploy to cuioss.github.io
        uses: JamesIves/github-pages-deploy-action@6c2d9db40f9296374acc17b90404b6e8864128c8 # v4.7.3
        with:
          folder: gh-pages
          repository-name: cuioss/cuioss.github.io
          target-folder: cui-jwt/benchmarks
          branch: main
          token: ${{ secrets.PAGES_DEPLOY_TOKEN }}
