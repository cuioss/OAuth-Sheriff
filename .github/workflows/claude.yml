name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 1
      - name: Set up JDK 21
        uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5.0.0
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"
          
          # Optional: Allow Claude to run specific commands
          # allowed_tools: "Bash(npm install),Bash(npm run build),Bash(npm run test:*),Bash(npm run lint:*)"
          allowed_tools: "Bash(./mvnw*),Bash(./mvnw -Ppre-commit clean verify -DskipTests),Bash(./mvnw clean verify),Bash(./mvnw clean install),Bash(./mvnw -Ppre-commit clean verify -DskipTests -pl bom),Bash(./mvnw -Ppre-commit clean verify -DskipTests -pl cui-jwt-validation),Bash(./mvnw -Ppre-commit clean verify -DskipTests -pl cui-jwt-quarkus-parent),Bash(./mvnw -Ppre-commit clean verify -DskipTests -pl cui-jwt-quarkus-parent/cui-jwt-quarkus),Bash(./mvnw -Ppre-commit clean verify -DskipTests -pl cui-jwt-quarkus-parent/cui-jwt-quarkus-deployment),Bash(./mvnw -Ppre-commit clean verify -DskipTests -pl cui-jwt-quarkus-parent/cui-jwt-quarkus-integration-tests),Bash(./mvnw -Ppre-commit clean verify -DskipTests -pl benchmarking),Bash(./mvnw -Ppre-commit clean verify -DskipTests -pl benchmarking/benchmark-library),Bash(./mvnw -Ppre-commit clean verify -DskipTests -pl benchmarking/benchmark-integration-wrk),Bash(./mvnw clean install -pl bom),Bash(./mvnw clean install -pl cui-jwt-validation),Bash(./mvnw clean install -pl cui-jwt-quarkus-parent),Bash(./mvnw clean install -pl cui-jwt-quarkus-parent/cui-jwt-quarkus),Bash(./mvnw clean install -pl cui-jwt-quarkus-parent/cui-jwt-quarkus-deployment),Bash(./mvnw clean install -pl cui-jwt-quarkus-parent/cui-jwt-quarkus-integration-tests),Bash(./mvnw clean install -pl benchmarking),Bash(./mvnw clean install -pl benchmarking/benchmark-library),Bash(./mvnw clean install -pl benchmarking/benchmark-integration-wrk),Bash(git*),Bash(find*),Bash(gh*),Bash(java*)"       
          # Optional: Add custom instructions for Claude to customize its behavior for your project
          # custom_instructions: |
          #   Follow our coding standards
          #   Ensure all new code has tests
          #   Use TypeScript for new files
          
          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test

