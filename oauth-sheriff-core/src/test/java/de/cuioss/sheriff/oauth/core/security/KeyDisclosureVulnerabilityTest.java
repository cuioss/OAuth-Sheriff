/*
 * Copyright Â© 2025 CUI-OpenSource-Software (info@cuioss.de)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.cuioss.sheriff.oauth.core.security;

import de.cuioss.sheriff.oauth.core.IssuerConfig;
import de.cuioss.sheriff.oauth.core.JWTValidationLogMessages;
import de.cuioss.sheriff.oauth.core.jwks.JwksLoader;
import de.cuioss.sheriff.oauth.core.jwks.JwksType;
import de.cuioss.sheriff.oauth.core.jwks.http.HttpJwksLoaderConfig;
import de.cuioss.sheriff.oauth.core.jwks.key.JWKSKeyLoader;
import de.cuioss.sheriff.oauth.core.jwks.key.KeyInfo;
import de.cuioss.sheriff.oauth.core.test.InMemoryJWKSFactory;
import de.cuioss.test.juli.LogAsserts;
import de.cuioss.test.juli.TestLogLevel;
import de.cuioss.test.juli.junit5.EnableTestLogger;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.security.Key;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Verifies private keys are never exposed through JWKS interfaces.
 */
@EnableTestLogger
@DisplayName("Key Disclosure Vulnerability Tests")
class KeyDisclosureVulnerabilityTest {

    private IssuerConfig issuerConfig;

    @BeforeEach
    void setUp() {
        // Create issuer config with JWKS content
        issuerConfig = IssuerConfig.builder()
                .issuerIdentifier("test-issuer")
                .expectedAudience("test-client")
                .jwksContent(InMemoryJWKSFactory.createDefaultJwks())
                .build();
        issuerConfig.initSecurityEventCounter(new SecurityEventCounter());

    }

    @Test
    @DisplayName("JwksLoader should not expose private keys")
    void jwksLoaderShouldNotExposePrivateKeys() {
        // Get the JwksLoader from the issuer config
        JwksLoader jwksLoader = issuerConfig.getJwksLoader();

        // Verify that the JwksLoader is not null
        assertNotNull(jwksLoader, "JwksLoader should not be null");

        // Verify that the JwksLoader contains public keys by checking the default key
        Optional<KeyInfo> keyInfo = jwksLoader.getKeyInfo(InMemoryJWKSFactory.DEFAULT_KEY_ID);
        assertTrue(keyInfo.isPresent(), "JwksLoader should contain the default key");

        // Check the key to ensure it's not a private key
        Key key = keyInfo.get().key();
        assertFalse(key instanceof PrivateKey, "JwksLoader should not contain private keys");
        assertInstanceOf(PublicKey.class, key, "JwksLoader should only contain public keys");
    }

    @Test
    @DisplayName("JWKS content should not contain private key material")
    void jwksContentShouldNotContainPrivateKeyMaterial() {
        // Get the JWKS content
        String jwksContent = InMemoryJWKSFactory.createDefaultJwks();

        // Verify that the JWKS content is not null or empty
        assertNotNull(jwksContent, "JWKS content should not be null");
        assertFalse(jwksContent.isEmpty(), "JWKS content should not be empty");

        // Verify that the JWKS content does not contain private key indicators
        assertFalse(jwksContent.contains("\"d\""), "JWKS content should not contain private key component 'd'");
        assertFalse(jwksContent.contains("\"p\""), "JWKS content should not contain private key component 'p'");
        assertFalse(jwksContent.contains("\"q\""), "JWKS content should not contain private key component 'q'");
        assertFalse(jwksContent.contains("\"dp\""), "JWKS content should not contain private key component 'dp'");
        assertFalse(jwksContent.contains("\"dq\""), "JWKS content should not contain private key component 'dq'");
        assertFalse(jwksContent.contains("\"qi\""), "JWKS content should not contain private key component 'qi'");
        assertFalse(jwksContent.contains("PRIVATE KEY"), "JWKS content should not contain 'PRIVATE KEY' string");
    }


    @Test
    @DisplayName("JWKS loader should warn about insecure HTTP URLs")
    void jwksLoaderShouldWarnAboutInsecureHttpUrls() {
        // Test that HTTPS URLs work correctly without warnings
        HttpJwksLoaderConfig httpsConfig = HttpJwksLoaderConfig.builder()
                .jwksUrl("https://example.com/.well-known/jwks.json")
                .issuerIdentifier("test-issuer")
                .build();

        assertTrue(httpsConfig.getHttpHandler().getUrl().toString().startsWith("https://"),
                "JWKS URL should use HTTPS");

        // Test that HTTP URLs trigger a warning
        HttpJwksLoaderConfig httpConfig = HttpJwksLoaderConfig.builder()
                .jwksUrl("http://example.com/.well-known/jwks.json")
                .issuerIdentifier("test-issuer")
                .build();

        // Verify the insecure HTTP URL is allowed but logs a warning
        assertTrue(httpConfig.getHttpHandler().getUrl().toString().startsWith("http://"),
                "HTTP URLs are currently allowed");

        // Verify the warning was logged using the LogRecord identifier
        LogAsserts.assertLogMessagePresentContaining(TestLogLevel.WARN,
                JWTValidationLogMessages.WARN.INSECURE_HTTP_JWKS.resolveIdentifierString());

        // Also verify the URL is in the log message
        LogAsserts.assertLogMessagePresentContaining(TestLogLevel.WARN,
                "http://example.com/.well-known/jwks.json");
    }

    @Test
    @DisplayName("JWKSKeyLoader should not expose private keys")
    void jwksKeyLoaderShouldNotExposePrivateKeys() {
        // Create a JWKSKeyLoader with JWKS content
        String jwksContent = InMemoryJWKSFactory.createDefaultJwks();
        JWKSKeyLoader keyLoader = JWKSKeyLoader.builder()
                .jwksContent(jwksContent)
                .jwksType(JwksType.MEMORY)
                .build();
        keyLoader.initJWKSLoader(new SecurityEventCounter());

        // Get the default key info
        Optional<KeyInfo> keyInfoOpt = keyLoader.getKeyInfo(InMemoryJWKSFactory.DEFAULT_KEY_ID);

        // Verify that the key info is present
        assertTrue(keyInfoOpt.isPresent(), "Key info should be present for default key ID");

        // Check the key to ensure it's not a private key
        KeyInfo keyInfo = keyInfoOpt.get();
        Key key = keyInfo.key();
        assertFalse(key instanceof PrivateKey, "JWKSKeyLoader should not load private keys");
        assertInstanceOf(PublicKey.class, key, "JWKSKeyLoader should only load public keys");
    }
}
