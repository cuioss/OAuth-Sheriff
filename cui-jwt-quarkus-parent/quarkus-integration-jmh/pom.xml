<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>de.cuioss.jwt</groupId>
        <artifactId>cui-jwt-quarkus-parent</artifactId>
        <version>1.0.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <artifactId>quarkus-integration-jmh</artifactId>
    <packaging>jar</packaging>
    <name>JWT Token Validation Quarkus Integration JMH Benchmarks</name>
    <description>JMH benchmarks for Quarkus integration testing against live services</description>

    <properties>
        <maven.jar.plugin.automatic.module.name>de.cuioss.jwt.quarkus.benchmark</maven.jar.plugin.automatic.module.name>
        <skip.benchmark>true</skip.benchmark>
        <sonar.skip>true</sonar.skip>
        
        <!-- Default benchmark runner -->
        <benchmark.runner>de.cuioss.jwt.quarkus.benchmark.BenchmarkRunner</benchmark.runner>
        
        <!-- Default benchmark results directory -->
        <benchmark.results.dir>target/benchmark-results</benchmark.results.dir>
        
        <!-- JMH Configuration Properties - Optimized for integration testing -->
        <jmh.result.format>JSON</jmh.result.format>
        <jmh.result.filePrefix>${benchmark.results.dir}/integration-benchmark-result</jmh.result.filePrefix>
        <jmh.iterations>2</jmh.iterations>
        <jmh.warmupIterations>1</jmh.warmupIterations>
        <jmh.forks>1</jmh.forks>
        <jmh.threads>10</jmh.threads>
        <jmh.time>5s</jmh.time>
        <jmh.warmupTime>1s</jmh.warmupTime>
        
        <!-- Integration test service URLs - aligned with docker-compose.yml ports -->
        <integration.service.url>https://localhost:10443</integration.service.url>
        <keycloak.url>https://localhost:1443</keycloak.url>
        <quarkus.metrics.url>https://localhost:10443</quarkus.metrics.url>
    </properties>

    <dependencies>
        <!-- JMH dependencies -->
        <dependency>
            <groupId>org.openjdk.jmh</groupId>
            <artifactId>jmh-core</artifactId>
            <version>${version.jmh}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.openjdk.jmh</groupId>
            <artifactId>jmh-generator-annprocess</artifactId>
            <version>${version.jmh}</version>
            <scope>provided</scope>
        </dependency>
        
        <!-- CUI utilities -->
        <dependency>
            <groupId>de.cuioss</groupId>
            <artifactId>cui-java-tools</artifactId>
            <scope>compile</scope>
        </dependency>
        
        <!-- JSON processing -->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.10.1</version>
            <scope>compile</scope>
        </dependency>
        
        <!-- HdrHistogram for accurate latency recording -->
        <dependency>
            <groupId>org.hdrhistogram</groupId>
            <artifactId>HdrHistogram</artifactId>
            <version>2.1.12</version>
            <scope>compile</scope>
        </dependency>
        
        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>
        
        <!-- JUnit for basic testing -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>benchmark-testing</id>
            <properties>
                <skip.benchmark>false</skip.benchmark>
                <benchmark.results.dir>target/benchmark-results</benchmark.results.dir>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <executions>
                            <!-- Build integration tests (using smart native build script) -->
                            <execution>
                                <id>maven-build-integration-tests</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>../../mvnw</executable>
                                    <arguments>
                                        <argument>compile</argument>
                                        <argument>exec:exec@build-native-if-needed</argument>
                                        <argument>exec:exec@docker-build-distroless</argument>
                                        <argument>-Pintegration-tests</argument>
                                        <argument>-DskipTests</argument>
                                    </arguments>
                                    <workingDirectory>${project.basedir}/../cui-jwt-quarkus-integration-tests</workingDirectory>
                                </configuration>
                            </execution>
                            <!-- Start integration test containers (keep running for benchmarks) -->
                            <execution>
                                <id>start-integration-containers</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>../cui-jwt-quarkus-integration-tests/scripts/start-integration-container.sh</executable>
                                    <workingDirectory>${project.basedir}</workingDirectory>
                                    <environmentVariables>
                                        <!-- Enable benchmark-specific Quarkus profile that disables JWT caching
                                             This ensures every request goes through full validation pipeline for accurate metrics.
                                             The benchmark profile is defined in application-benchmark.properties which sets:
                                             - cui.jwt.cache.access-token.enabled=false
                                             This attempts to increase sample counts for better statistical analysis,
                                             though actual sample counts are still limited by the monitor's window size. -->
                                        <ENABLE_BENCHMARK_PROFILE>true</ENABLE_BENCHMARK_PROFILE>
                                    </environmentVariables>
                                </configuration>
                            </execution>
                            <!-- Generate HTTP metrics from benchmark results -->
                            <execution>
                                <id>generate-http-metrics</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>bash</executable>
                                    <arguments>
                                        <argument>-c</argument>
                                        <argument>cd target &amp;&amp; java -cp "classes:dependency/*" de.cuioss.jwt.quarkus.benchmark.metrics.MetricsPostProcessor benchmark-results || echo "Comprehensive metrics generation failed - continuing"</argument>
                                    </arguments>
                                    <workingDirectory>${project.basedir}</workingDirectory>
                                </configuration>
                            </execution>
                            <!-- Stop integration test containers -->
                            <execution>
                                <id>stop-integration-containers</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>../cui-jwt-quarkus-integration-tests/scripts/stop-integration-container.sh</executable>
                                    <workingDirectory>${project.basedir}</workingDirectory>
                                    <!-- Don't fail build if cleanup fails -->
                                    <successCodes>
                                        <successCode>0</successCode>
                                        <successCode>1</successCode>
                                    </successCodes>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        
        <profile>
            <id>rebuild-container</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <executions>
                            <!-- Clean integration tests to force container rebuild -->
                            <execution>
                                <id>clean-integration-tests-for-rebuild</id>
                                <phase>clean</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>../../mvnw</executable>
                                    <arguments>
                                        <argument>clean</argument>
                                    </arguments>
                                    <workingDirectory>${project.basedir}/../cui-jwt-quarkus-integration-tests</workingDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        
        <profile>
            <id>benchmark-jfr</id>
            <properties>
                <skip.benchmark>false</skip.benchmark>
                <benchmark.results.dir>target/benchmark-jfr-results</benchmark.results.dir>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>collect-jfr-files</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>bash</executable>
                                    <arguments>
                                        <argument>-c</argument>
                                        <argument>docker cp cui-jwt-quarkus-integration-tests-cui-jwt-integration-tests-1:/tmp/jfr-output ${benchmark.results.dir}/jfr-recordings || true</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <!-- Generate HTTP metrics from benchmark results (JFR profile) -->
                            <execution>
                                <id>generate-http-metrics-jfr</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>bash</executable>
                                    <arguments>
                                        <argument>-c</argument>
                                        <argument>cd target &amp;&amp; java -cp "classes:dependency/*" de.cuioss.jwt.quarkus.benchmark.metrics.MetricsPostProcessor benchmark-results || echo "Comprehensive metrics generation failed - continuing"</argument>
                                    </arguments>
                                    <workingDirectory>${project.basedir}</workingDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <build>
        <plugins>
            <!-- Configure surefire for unit tests -->
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skipTests>false</skipTests>
                    <argLine>-XX:+IgnoreUnrecognizedVMOptions -Djava.awt.headless=true</argLine>
                </configuration>
            </plugin>

            <!-- Enable annotation processing for JMH -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.openjdk.jmh</groupId>
                            <artifactId>jmh-generator-annprocess</artifactId>
                            <version>${version.jmh}</version>
                        </path>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${version.lombok}</version>
                        </path>
                    </annotationProcessorPaths>
                    <release>21</release>
                </configuration>
            </plugin>

            <!-- Execute benchmark tests when skip.benchmark is false -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>create-benchmark-dir</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skip.benchmark}</skip>
                            <executable>mkdir</executable>
                            <arguments>
                                <argument>-p</argument>
                                <argument>${benchmark.results.dir}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>run-benchmarks</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skip.benchmark}</skip>
                            <executable>java</executable>
                            <arguments>
                                <argument>-classpath</argument>
                                <argument>${project.build.outputDirectory}${path.separator}${project.build.directory}/dependency/*</argument>
                                <argument>-Djmh.result.format=${jmh.result.format}</argument>
                                <argument>-Djmh.result.filePrefix=${jmh.result.filePrefix}</argument>
                                <argument>-Djmh.iterations=${jmh.iterations}</argument>
                                <argument>-Djmh.warmupIterations=${jmh.warmupIterations}</argument>
                                <argument>-Djmh.forks=${jmh.forks}</argument>
                                <argument>-Djmh.threads=${jmh.threads}</argument>
                                <argument>-Djmh.time=${jmh.time}</argument>
                                <argument>-Djmh.warmupTime=${jmh.warmupTime}</argument>
                                <argument>-Dbenchmark.results.dir=${benchmark.results.dir}</argument>
                                <argument>-Dintegration.service.url=${integration.service.url}</argument>
                                <argument>-Dkeycloak.url=${keycloak.url}</argument>
                                <argument>-Dquarkus.metrics.url=${quarkus.metrics.url}</argument>
                                <argument>-Djava.util.logging.config.file=src/main/resources/benchmark-logging.properties</argument>
                                <argument>-XX:+UnlockDiagnosticVMOptions</argument>
                                <argument>-XX:+DebugNonSafepoints</argument>
                                <argument>${benchmark.runner}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Build classpath for benchmark execution -->
            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/dependency</outputDirectory>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>false</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>