# Multi-stage Dockerfile for native build with optional JFR support
# Stage 1: Build native image with Mandrel
FROM quay.io/quarkus/ubi-quarkus-mandrel-builder-image:jdk-21 AS build

# Build argument to enable JFR monitoring
ARG ENABLE_JFR=false

USER root

# Set working directory
WORKDIR /build

# Copy source and build files from the parent context (cui-jwt root)
COPY --chown=quarkus:quarkus . /build/

# Build native image with optional JFR support
USER quarkus
RUN cd /build/cui-jwt-quarkus-parent/cui-jwt-quarkus-integration-tests && \
    if [ "$ENABLE_JFR" = "true" ]; then \
        ../../mvnw compile quarkus:build --no-transfer-progress -Dquarkus.native.enabled=true -Dquarkus.native.monitoring=jfr -Dquarkus.native.container-build=false -DskipTests -Dexec.skip=true; \
    else \
        ../../mvnw compile quarkus:build --no-transfer-progress -Dquarkus.native.enabled=true -Dquarkus.native.container-build=false -DskipTests -Dexec.skip=true; \
    fi

# Stage 2: Distroless runtime with native executable
FROM quay.io/quarkus/quarkus-distroless-image:2.0

# Build argument propagated to runtime stage
ARG ENABLE_JFR=false

# Security metadata and labels
LABEL org.opencontainers.image.title="CUI JWT Quarkus Integration Tests"
LABEL org.opencontainers.image.description="Security-hardened Quarkus native application for JWT validation"
LABEL org.opencontainers.image.vendor="CUI"
LABEL org.opencontainers.image.version="1.0.0-SNAPSHOT"
LABEL security.scan.required="true"
LABEL security.distroless="true"
LABEL performance.jfr.enabled="$ENABLE_JFR"

WORKDIR /app

# Copy the native executable with restrictive permissions  
COPY --from=build --chmod=0755 --chown=root:root /build/cui-jwt-quarkus-parent/cui-jwt-quarkus-integration-tests/target/*-runner /app/application

# Copy health check script with restrictive permissions (root ownership)
COPY --from=build --chmod=0755 --chown=root:root /build/cui-jwt-quarkus-parent/cui-jwt-quarkus-integration-tests/src/main/docker/health-check.sh /app/health-check.sh

# Copy PEM certificates with restrictive permissions (root ownership)
# Certificate (public) - readable by all but owned by root
# Private key - restricted access and owned by root
# Truststore - readable by application but owned by root
COPY --from=build --chmod=0644 --chown=root:root /build/cui-jwt-quarkus-parent/cui-jwt-quarkus-integration-tests/src/main/docker/certificates/localhost.crt /app/certificates/localhost.crt
COPY --from=build --chmod=0600 --chown=root:root /build/cui-jwt-quarkus-parent/cui-jwt-quarkus-integration-tests/src/main/docker/certificates/localhost.key /app/certificates/localhost.key
COPY --from=build --chmod=0644 --chown=root:root /build/cui-jwt-quarkus-parent/cui-jwt-quarkus-integration-tests/src/main/docker/certificates/localhost-truststore.p12 /app/certificates/localhost-truststore.p12

# Note: For read-only filesystem support, temporary directories will be mounted as tmpfs
# Distroless images don't include shell commands, so tmpfs mounts are configured at runtime

# Console logging only - no log files needed for security
# Temporary files will use tmpfs mounts

# Expose HTTPS port only (no HTTP for security)
EXPOSE 8443

# Health check using internal script (optimized for fast native startup)
HEALTHCHECK --interval=15s --timeout=5s --retries=3 --start-period=10s \
  CMD ["/app/health-check.sh"]

# Run as non-root user for security (following OWASP recommendations)
USER nonroot

# Use exec form for better signal handling and security
# SSL system properties for native image HTTPS client functionality (GraalVM best practice)
ENTRYPOINT ["/app/application", "-Djavax.net.ssl.trustStore=/app/certificates/localhost-truststore.p12", "-Djavax.net.ssl.trustStorePassword=localhost-trust", "-Djavax.net.ssl.trustStoreType=PKCS12"]
