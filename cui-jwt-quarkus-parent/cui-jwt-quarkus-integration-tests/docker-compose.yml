# JWT Integration Tests - Production-Grade Configuration
# Purpose: Test with production-equivalent settings to catch issues early

services:
  prometheus:
    image: prom/prometheus:v3.6.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=1h'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - jwt-integration

  keycloak:
    # NOTE: Dependabot cannot automatically update this image version.
    # Manual updates required. Check: https://quay.io/keycloak/keycloak
    image: quay.io/keycloak/keycloak:26.4.0
    command:
      - start-dev
      - --import-realm
      - --https-certificate-file=/opt/keycloak/certificates/localhost.crt
      - --https-certificate-key-file=/opt/keycloak/certificates/localhost.key
      - --https-port=8443
    ports:
      - "1443:8443"  # External HTTPS port for Keycloak admin
      - "1090:9000"  # External port for Keycloak management (health checks)
    volumes:
      - ./src/main/docker/keycloak:/opt/keycloak/data/import:ro
      - ./src/main/docker/certificates:/opt/keycloak/certificates:ro
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin
      - KC_HEALTH_ENABLED=true
      - KC_METRICS_ENABLED=true
      - KC_LOG_LEVEL=INFO
      # Hostname configuration v2 for well-known discovery endpoint (research-based)
      - KC_HOSTNAME_STRICT=false
      - KC_HTTP_ENABLED=false
      - KC_HTTPS_PORT=8443
      - KC_HOSTNAME=localhost
      # External hostname for Docker container well-known discovery
      
      # HTTP Access Logging Configuration (Quarkus-based)
      # Enable comprehensive request/response logging for JWKS endpoint diagnostics
      - QUARKUS_HTTP_ACCESS_LOG_ENABLED=true
      - QUARKUS_HTTP_ACCESS_LOG_PATTERN=combined
      - QUARKUS_HTTP_ACCESS_LOG_CATEGORY=io.quarkus.http.access-log
    networks:
      - jwt-integration
    
    # Health check to ensure Keycloak is ready before dependent services start
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/localhost/9000 && exec 3<&-"]
      interval: 5s
      timeout: 3s
      retries: 12
      start_period: 30s

  cui-jwt-integration-tests:
    # Use separate Dockerfiles for different variants
    # For distroless: DOCKERFILE=Dockerfile.native.distroless DOCKER_IMAGE_TAG=distroless
    # For JFR:       DOCKERFILE=Dockerfile.native.jfr DOCKER_IMAGE_TAG=jfr
    image: "cui-jwt-integration-tests:${DOCKER_IMAGE_TAG:-distroless}"
    build:
      context: ../..
      dockerfile: cui-jwt-quarkus-parent/cui-jwt-quarkus-integration-tests/src/main/docker/${DOCKERFILE:-Dockerfile.native.distroless}
      cache_from:
        - quay.io/quarkus/quarkus-distroless-image:2.0
        - registry.access.redhat.com/ubi8/ubi-minimal:8.10
        - quay.io/quarkus/ubi9-quarkus-mandrel-builder-image:jdk-25

    ports:
      - "10443:8443"  # External test port for integration tests

    environment:
      # JVM SSL Session Cache Optimization for TLS Performance
      # JFR configuration handled by image variant (distroless vs JFR-enabled)
      - JAVA_OPTS_APPEND=-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Djdk.tls.rejectClientInitiatedRenegotiation=true -Djavax.net.ssl.sessionCacheSize=20480 -Djavax.net.ssl.sessionTimeout=300 -Djsse.enableSNIExtension=true -Djdk.tls.maxHandshakeMessageSize=65536 -Djdk.tls.maxCertificateChainLength=10 -Djdk.tls.useExtendedMasterSecret=true
      - QUARKUS_LOG_LEVEL=INFO
      # Log file path configuration - write to mounted /logs directory
      - LOG_FILE_PATH=/logs/quarkus.log

    depends_on:
      keycloak:
        condition: service_healthy

    volumes:
      # Read-only certificate mount (production pattern)
      - ./src/main/docker/certificates:/app/certificates:ro
      # Mount target directory for log files (defaults to ./target)
      - ${LOG_TARGET_DIR:-./target}:/logs:rw

    # OWASP Security hardening (production-grade)
    security_opt:
      - no-new-privileges:true

    # Drop all capabilities (principle of least privilege)
    cap_drop:
      - ALL

    # Read-only filesystem with tmpfs for temporary files (production setting)
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m

    # Resource configuration for benchmarking - no CPU limits, autoscale to available resources
    deploy:
      resources:
        limits:
          memory: 512M  # More than sufficient - peak usage only 128MB
          # No CPU limit - use all available cores
        reservations:
          memory: 256M
          # No CPU reservation - flexible scaling

    # No health check for distroless - health endpoints are available at /q/health

    # Network isolation (production pattern)
    networks:
      - jwt-integration

    # Production restart policy
    restart: unless-stopped

  # WRK HTTP benchmarking tool - used by integration benchmarks
  # Usage: docker compose run --rm wrk -t5 -c50 -d30s --latency https://cui-jwt-integration-tests:8443/q/health/live
  wrk:
    build:
      context: ../..
      dockerfile: benchmarking/benchmark-integration-wrk/Dockerfile.wrk
    image: wrk:local
    networks:
      - jwt-integration
    # Only start for benchmarks
    profiles:
      - benchmark
    # No restart policy - this is a run-once service
    restart: "no"

networks:
  jwt-integration:
    driver: bridge
    # Control inter-container communication (production setting)
    internal: false
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: "1500"
