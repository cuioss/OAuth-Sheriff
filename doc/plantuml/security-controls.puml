@startuml
!include plantuml.skin
skinparam PackageBackgroundColor $SECURITY_COLOR
skinparam RectangleBackgroundColor $COMPONENT_COLOR

' Main security control categories
package "Input Validation" as InputValidation {
  rectangle "Token Format Validation" as FormatValidation
  rectangle "Size Limits (8KB max)" as SizeLimits
  rectangle "Claim Type Checking" as ClaimTypeChecking
  rectangle "Issuer Validation" as IssuerValidation
  rectangle "Algorithm Validation" as AlgorithmValidation
  rectangle "JSON Parsing Security" as JSONParsing
  rectangle "Injection Attack Protection" as InjectionProtection
}

package "Cryptographic Practices" as Crypto {
  rectangle "Standard JDK Providers" as JDKProviders
  rectangle "Secure Algorithms" as SecureAlgorithms
  rectangle "Insecure Algorithm Rejection" as AlgorithmRejection
  rectangle "Key Length Requirements" as KeyLength
  rectangle "Key Rotation Support" as KeyRotation
  rectangle "Cryptographic Agility" as CryptoAgility
}

package "Authentication & Authorization" as AuthN {
  rectangle "Signature Verification" as SignatureVerification
  rectangle "Issuer Validation" as IssuerValidation2
  rectangle "Token Expiration Checking" as ExpirationChecking
  rectangle "Audience Validation" as AudienceValidation
  rectangle "Not-before Time Validation" as NBFValidation
  rectangle "Subject Validation" as SubjectValidation
  rectangle "Scope Validation" as ScopeValidation
  rectangle "Client ID Validation" as ClientIDValidation
}

package "Secure Communication" as SecureComm {
  rectangle "TLS 1.2+ for JWKS" as TLS
  rectangle "Certificate Validation" as CertValidation
  rectangle "Secure HTTP Client Config" as HTTPClient
  rectangle "Connection Timeout Settings" as Timeout
  rectangle "Redirect Handling" as RedirectHandling
}

package "Error Handling & Logging" as ErrorLogging {
  rectangle "Secure Error Messages" as SecureErrors
  rectangle "Structured Logging" as StructuredLogging
  rectangle "Security Event Logging" as SecurityEventLogging
  rectangle "Exception Handling" as ExceptionHandling
  rectangle "Audit Logging" as AuditLogging
}

package "Data Protection" as DataProtection {
  rectangle "Secure Key Storage" as KeyStorage
  rectangle "Token Data Protection" as TokenDataProtection
  rectangle "Sensitive Claim Handling" as SensitiveClaimHandling
  rectangle "Cache Security" as CacheSecurity
  rectangle "Memory Management" as MemoryManagement
}

' Relationships between security controls
InputValidation --> AuthN : "Supports"
Crypto --> AuthN : "Enables"
Crypto --> DataProtection : "Protects"
SecureComm --> Crypto : "Secures key exchange"
ErrorLogging --> InputValidation : "Monitors"
ErrorLogging --> AuthN : "Audits"
DataProtection --> ErrorLogging : "Sanitizes"

' Notes for implementation details
note bottom of InputValidation
  Implementation:
  - Token format validation before processing
  - Size limits to prevent DoS attacks
  - Type checking for all claims
  - Validation against allowed issuers
  - Validation of algorithm headers
end note

note bottom of Crypto
  Implementation:
  - Standard JDK providers for cryptographic operations
  - Support for RS256, RS384, RS512, ES256, ES384, ES512
  - Rejection of "none", HS256, HS384, HS512
  - RSA: 2048+ bits, EC: P-256+
  - Automatic key rotation
end note

note bottom of AuthN
  Implementation:
  - Cryptographic signature verification
  - Validation against configured issuers
  - Expiration time checking with clock skew
  - Audience validation against expected values
  - Validation of nbf claim with clock skew
  - Validation of subject claim format
  - Scope-based authorization checks
end note

note bottom of SecureComm
  Implementation:
  - TLS 1.2+ for all JWKS endpoint communication
  - Certificate chain validation
  - Secure HTTP client configuration
  - Connection and read timeouts
  - Safe redirect handling
end note

note bottom of ErrorLogging
  Implementation:
  - No sensitive data in error messages
  - Structured logging format
  - Dedicated security event logging
  - Comprehensive exception handling
  - Audit logging for security events
end note

note bottom of DataProtection
  Implementation:
  - Secure storage for cryptographic keys
  - Protection of token data in memory
  - Special handling for sensitive claims
  - Secure cache implementation
  - Proper memory management
end note

@enduml
